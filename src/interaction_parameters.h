#pragma once

#include <string>
#include "sampler_state.h"

enum
{
    ip_none = 0,
    ip_partselect,
    ip_layerselect,
    ip_kgv_or_list,
    ip_wavedisplay,
    ip_lfo_load,
    ip_browser,
    ip_browser_mode,
    ip_browser_searchtext,
    ip_browser_previewbutton,
    ip_config_outputs,
    ip_config_slidersensitivity,
    ip_config_controller_id,
    ip_config_controller_mode,
    ip_config_browserdirs,
    ip_config_refresh_db,
    ip_config_kbdmode,
    ip_config_autopreview,
    ip_config_previewvolume,
    ip_config_save,
    ip_sample_prevnext,
    ip_patch_prevnext,
    ip_replace_sample,
    ip_sample_name,
    ip_sample_metadata,
    ip_solo,
    ip_select_layer,
    ip_select_all,
    ip_vumeter,
    ip_zone_name,
    ip_zone_params_begin = ip_zone_name, // start: properties that should be handled by multiselect
    ip_channel,
    ip_low_key,
    ip_root_key,
    ip_high_key,
    ip_low_vel,
    ip_high_vel,
    ip_low_key_f,
    ip_high_key_f,
    ip_low_vel_f,
    ip_high_vel_f,
    ip_coarse_tune,
    ip_fine_tune,
    ip_pitchcorrect,
    ip_reverse,
    ip_pbdepth,
    ip_playmode,
    ip_velsense,
    ip_keytrack,
    ip_mute_group,
    ip_EG_a,
    ip_EG_h,
    ip_EG_d,
    ip_EG_s,
    ip_EG_r,
    ip_EG_s0,
    ip_EG_s1,
    ip_EG_s2,

    ip_lforate,
    ip_lfoshape,
    ip_lforepeat,
    ip_lfocycle,
    ip_lfosync,
    ip_lfotrigger,
    ip_lfoshuffle,
    ip_lfoonce,
    ip_lfosteps,

    // ip_ef_attack,
    // ip_ef_release,
    ip_lag,
    ip_filter_object,
    ip_filter_type,
    ip_filter_bypass,
    ip_filter_mix,
    ip_filter1_fp,
    ip_filter2_fp,
    ip_filter1_ip,
    ip_filter2_ip,
    ip_mm_src,
    ip_mm_src2,
    ip_mm_dst,
    ip_mm_amount,
    ip_mm_curve,
    ip_mm_active,
    ip_nc_src,
    ip_nc_low,
    ip_nc_high,
    ip_ignore_part_polymode,
    // ip_polymode,
    // ip_portamento,
    // ip_portamento_mode,
    ip_mute,
    ip_pfg,
    ip_zone_aux_level,
    ip_zone_aux_balance,
    ip_zone_aux_output,
    ip_zone_aux_outmode,
    ip_zone_params_end =
        ip_zone_aux_outmode, // end: properties that should be handled by multiselect

    ip_part_name,
    ip_part_params_begin = ip_part_name,
    ip_part_midichannel,
    ip_part_polylimit,
    ip_part_transpose,
    ip_part_formant,
    // ip_part_polymode_partlevel,
    ip_part_polymode,
    ip_part_portamento,
    ip_part_portamento_mode,
    ip_part_userparam_name,
    ip_part_userparam_polarity,
    ip_part_userparam_value,
    ip_part_filter_object,
    ip_part_filter_type,
    ip_part_filter_bypass,
    ip_part_filter_mix,
    ip_part_filter1_fp,
    ip_part_filter2_fp,
    ip_part_filter1_ip,
    ip_part_filter2_ip,
    ip_part_aux_level,
    ip_part_aux_balance,
    ip_part_aux_output,
    ip_part_aux_outmode,
    ip_part_vs_layers,
    ip_part_vs_distribution,
    ip_part_vs_xf_equality,
    ip_part_vs_xfade,
    ip_part_mm_src,
    ip_part_mm_src2,
    ip_part_mm_dst,
    ip_part_mm_amount,
    ip_part_mm_curve,
    ip_part_mm_active,
    ip_part_nc_src,
    ip_part_nc_low,
    ip_part_nc_high,

    ip_part_params_end = ip_part_nc_high,

    ip_multi_filter_object,
    ip_multi_params_begin = ip_multi_filter_object,
    ip_multi_filter_type,
    ip_multi_filter_bypass,
    ip_multi_filter_fp1,
    ip_multi_filter_fp2,
    ip_multi_filter_fp3,
    ip_multi_filter_fp4,
    ip_multi_filter_fp5,
    ip_multi_filter_fp6,
    ip_multi_filter_fp7,
    ip_multi_filter_fp8,
    ip_multi_filter_fp9,
    ip_multi_filter_ip1,
    ip_multi_filter_ip2,
    ip_multi_filter_output,
    ip_multi_filter_pregain,
    ip_multi_filter_postgain,
    ip_multi_params_end = ip_multi_filter_postgain,

    n_ip_entries,

};

struct interactiondata
{
    int vtype;
    int ptr_offset;
    int n_subid;
    int subid_ptr_offset;
    std::string label;
};

enum
{
    ipvt_int = 0,
    ipvt_char,
    ipvt_float,
    ipvt_string,
    ipvt_bdata, // binary data for fx preset save/load (size from subid_ptr_offset)
    ipvt_other
};

const interactiondata ip_data[n_ip_entries] = {
    ipvt_int,
    0,
    1,
    0,
    "none",
    ipvt_int,
    0,
    1,
    0,
    "part select",
    ipvt_int,
    0,
    1,
    0,
    "layer select",
    ipvt_int,
    0,
    1,
    0,
    "kgv",
    ipvt_int,
    0,
    1,
    0,
    "wavedisplay",
    ipvt_int,
    0,
    1,
    0,
    "LFO load shape",
    ipvt_int,
    0,
    1,
    0,
    "filebrowser",
    ipvt_int,
    0,
    1,
    0,
    "fb mode",
    ipvt_int,
    0,
    1,
    0,
    "fb searchtext",
    ipvt_int,
    0,
    1,
    0,
    "fb preview",
    ipvt_int,
    0,
    1,
    0,
    "conf outputs",
    ipvt_float,
    0,
    1,
    0,
    "conf slider sens",
    ipvt_int,
    0,
    16,
    0,
    "conf ctrl id",
    ipvt_int,
    0,
    16,
    0,
    "conf ctrl mode",
    ipvt_string,
    0,
    4,
    0,
    "conf browserdirs",
    ipvt_int,
    0,
    1,
    0,
    "conf refresh db",
    ipvt_int,
    0,
    1,
    0,
    "conf kbdmode",
    ipvt_int,
    0,
    1,
    0,
    "conf autopreview",
    ipvt_float,
    0,
    1,
    0,
    "conf preview volume",
    ipvt_int,
    0,
    1,
    0,
    "conf save",

    ipvt_int,
    0,
    2,
    0,
    "sample prev/next",
    ipvt_int,
    0,
    2,
    0,
    "patch prev/next",
    ipvt_int,
    0,
    1,
    0,
    "replace sample",
    ipvt_string,
    0,
    1,
    0,
    "sample name",
    ipvt_int,
    0,
    1,
    0,
    "sample metadata",
    ipvt_int,
    0,
    1,
    0,
    "solo",
    ipvt_int,
    0,
    1,
    0,
    "select layer",
    ipvt_int,
    0,
    1,
    0,
    "select all",
    ipvt_int,
    0,
    1,
    0,
    "VU",

    ipvt_string,
    (int)offsetof(sample_zone, name),
    1,
    0,
    "zone name",
    ipvt_int,
    (int)offsetof(sample_zone, part),
    1,
    0,
    "part",
    ipvt_int,
    (int)offsetof(sample_zone, key_low),
    1,
    0,
    "low key",
    ipvt_int,
    (int)offsetof(sample_zone, key_root),
    1,
    0,
    "root key",
    ipvt_int,
    (int)offsetof(sample_zone, key_high),
    1,
    0,
    "high key",
    ipvt_int,
    (int)offsetof(sample_zone, velocity_low),
    1,
    0,
    "low vel",
    ipvt_int,
    (int)offsetof(sample_zone, velocity_high),
    1,
    0,
    "high vel",

    ipvt_int,
    (int)offsetof(sample_zone, key_low_fade),
    1,
    0,
    "low key F",
    ipvt_int,
    (int)offsetof(sample_zone, key_high_fade),
    1,
    0,
    "high key F",
    ipvt_int,
    (int)offsetof(sample_zone, velocity_low_fade),
    1,
    0,
    "low vel F",
    ipvt_int,
    (int)offsetof(sample_zone, velocity_high_fade),
    1,
    0,
    "high vel F",

    ipvt_int,
    (int)offsetof(sample_zone, transpose),
    1,
    0,
    "coarse tune",
    ipvt_float,
    (int)offsetof(sample_zone, finetune),
    1,
    0,
    "fine tune",
    ipvt_float,
    (int)offsetof(sample_zone, pitchcorrection),
    1,
    0,
    "pitch correction",
    ipvt_int,
    (int)offsetof(sample_zone, reverse),
    1,
    0,
    "reverse",
    ipvt_int,
    (int)offsetof(sample_zone, pitch_bend_depth),
    1,
    0,
    "PB depth",
    ipvt_int,
    (int)offsetof(sample_zone, playmode),
    1,
    0,
    "playmode",
    ipvt_float,
    (int)offsetof(sample_zone, velsense),
    1,
    0,
    "velsense",
    ipvt_float,
    (int)offsetof(sample_zone, keytrack),
    1,
    0,
    "keytrack",
    ipvt_int,
    (int)offsetof(sample_zone, mute_group),
    1,
    0,
    "mute group",

    ipvt_float,
    (int)offsetof(sample_zone, AEG.attack),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG attack",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.hold),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG hold",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.decay),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG decay",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.sustain),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG sustain",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.release),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG release",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.shape[0]),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG attack shape",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.shape[1]),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG decay shape",
    ipvt_float,
    (int)offsetof(sample_zone, AEG.shape[2]),
    2,
    (int)sizeof(envelope_AHDSR),
    "EG release shape",

    ipvt_float,
    (int)offsetof(sample_zone, LFO[0].rate),
    3,
    (int)sizeof(steplfostruct),
    "LFO rate",
    ipvt_float,
    (int)offsetof(sample_zone, LFO[0].smooth),
    3,
    (int)sizeof(steplfostruct),
    "LFO smooth",
    ipvt_int,
    (int)offsetof(sample_zone, LFO[0].repeat),
    3,
    (int)sizeof(steplfostruct),
    "LFO repeat",
    ipvt_int,
    (int)offsetof(sample_zone, LFO[0].cyclemode),
    3,
    (int)sizeof(steplfostruct),
    "LFO cyclemode",
    ipvt_int,
    (int)offsetof(sample_zone, LFO[0].temposync),
    3,
    (int)sizeof(steplfostruct),
    "LFO temposync",
    ipvt_int,
    (int)offsetof(sample_zone, LFO[0].triggermode),
    3,
    (int)sizeof(steplfostruct),
    "LFO trigger",
    ipvt_float,
    (int)offsetof(sample_zone, LFO[0].shuffle),
    3,
    (int)sizeof(steplfostruct),
    "LFO shuffle",
    ipvt_int,
    (int)offsetof(sample_zone, LFO[0].onlyonce),
    3,
    (int)sizeof(steplfostruct),
    "LFO once",
    ipvt_float,
    (int)offsetof(sample_zone, LFO[0].data[0]),
    3,
    (int)sizeof(steplfostruct),
    "LFO stepdata",

    // ipvt_float,	(int)offsetof(sample_zone,ef_attack),	1,0,"EF attack",
    // ipvt_float,	(int)offsetof(sample_zone,ef_release),	1,0,"EF release",
    ipvt_float,
    (int)offsetof(sample_zone, lag_generator[0]),
    2,
    (int)sizeof(float),
    "Lag generator",

    ipvt_bdata,
    (int)offsetof(sample_zone, Filter),
    2,
    (int)sizeof(filterstruct),
    "filter object",
    ipvt_int,
    (int)offsetof(sample_zone, Filter[0].type),
    2,
    (int)sizeof(filterstruct),
    "filter type",
    ipvt_int,
    (int)offsetof(sample_zone, Filter[0].bypass),
    2,
    (int)sizeof(filterstruct),
    "filter bypass",
    ipvt_float,
    (int)offsetof(sample_zone, Filter[0].mix),
    2,
    (int)sizeof(filterstruct),
    "filter mix",
    ipvt_float,
    (int)offsetof(sample_zone, Filter[0].p[0]),
    n_filter_parameters,
    (int)sizeof(float),
    "filter1 fp",
    ipvt_float,
    (int)offsetof(sample_zone, Filter[1].p[0]),
    n_filter_parameters,
    (int)sizeof(float),
    "filter2 fp",
    ipvt_int,
    (int)offsetof(sample_zone, Filter[0].ip[0]),
    n_filter_iparameters,
    (int)sizeof(int),
    "filter1 ip",
    ipvt_int,
    (int)offsetof(sample_zone, Filter[1].ip[0]),
    n_filter_iparameters,
    (int)sizeof(int),
    "filter2 ip",

    ipvt_int,
    (int)offsetof(sample_zone, mm[0].source),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM source",
    ipvt_int,
    (int)offsetof(sample_zone, mm[0].source2),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM source2",
    ipvt_int,
    (int)offsetof(sample_zone, mm[0].destination),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM destination",
    ipvt_float,
    (int)offsetof(sample_zone, mm[0].strength),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM amount",
    ipvt_int,
    (int)offsetof(sample_zone, mm[0].curve),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM curve",
    ipvt_int,
    (int)offsetof(sample_zone, mm[0].active),
    mm_entries,
    (int)sizeof(mm_entry),
    "MM active",

    ipvt_int,
    (int)offsetof(sample_zone, nc[0].source),
    nc_entries,
    (int)sizeof(nc_entry),
    "zone nc src",
    ipvt_int,
    (int)offsetof(sample_zone, nc[0].low),
    nc_entries,
    (int)sizeof(nc_entry),
    "zone nc low",
    ipvt_int,
    (int)offsetof(sample_zone, nc[0].high),
    nc_entries,
    (int)sizeof(nc_entry),
    "zone nc high",

    // ipvt_int,	(int)offsetof(sample_zone,polymode),	1,0,"polymode",
    // ipvt_float,	(int)offsetof(sample_zone,portamento),	1,0,"portamento",
    // ipvt_int,	(int)offsetof(sample_zone,portamento_mode),	1,0,"portamento mode",
    ipvt_int,
    (int)offsetof(sample_zone, ignore_part_polymode),
    1,
    0,
    "ignore playmode",
    ipvt_int,
    (int)offsetof(sample_zone, mute),
    1,
    0,
    "mute",

    ipvt_float,
    (int)offsetof(sample_zone, pre_filter_gain),
    1,
    0,
    "prefilter gain",

    ipvt_float,
    (int)offsetof(sample_zone, aux[0].level),
    3,
    (int)sizeof(aux_buss),
    "main/AUX level",
    ipvt_float,
    (int)offsetof(sample_zone, aux[0].balance),
    3,
    (int)sizeof(aux_buss),
    "main/AUX balance",
    ipvt_int,
    (int)offsetof(sample_zone, aux[0].output),
    3,
    (int)sizeof(aux_buss),
    "main/AUX output",
    ipvt_int,
    (int)offsetof(sample_zone, aux[0].outmode),
    3,
    (int)sizeof(aux_buss),
    "main/AUX off/pre/post",

    ipvt_string,
    (int)offsetof(sample_part, name),
    1,
    0,
    "part name",
    ipvt_int,
    (int)offsetof(sample_part, MIDIchannel),
    1,
    0,
    "MIDI channel",
    ipvt_int,
    (int)offsetof(sample_part, polylimit),
    1,
    0,
    "part polylimit",
    ipvt_int,
    (int)offsetof(sample_part, transpose),
    1,
    0,
    "part transpose",
    ipvt_int,
    (int)offsetof(sample_part, formant),
    1,
    0,
    "part formant",
    //	ipvt_int,	(int)offsetof(sample_part,polymode_partlevel),1,0,"part polymodelevel",
    ipvt_int,
    (int)offsetof(sample_part, polymode),
    1,
    0,
    "part polymode",
    ipvt_float,
    (int)offsetof(sample_part, portamento),
    1,
    0,
    "part portamento",
    ipvt_int,
    (int)offsetof(sample_part, portamento_mode),
    1,
    0,
    "part portamento mode",
    ipvt_string,
    (int)offsetof(sample_part, userparametername),
    16,
    state_string_length,
    "part UP name",
    ipvt_int,
    (int)offsetof(sample_part, userparameterpolarity),
    16,
    (int)sizeof(int),
    "part UP polarity",
    ipvt_float,
    (int)offsetof(sample_part, userparameter),
    16,
    (int)sizeof(float),
    "part UP value",
    ipvt_bdata,
    (int)offsetof(sample_part, Filter),
    2,
    (int)sizeof(filterstruct),
    "part filter object",
    ipvt_int,
    (int)offsetof(sample_part, Filter[0].type),
    2,
    (int)sizeof(filterstruct),
    "part filter type",
    ipvt_int,
    (int)offsetof(sample_part, Filter[0].bypass),
    2,
    (int)sizeof(filterstruct),
    "part filter bypass",
    ipvt_float,
    (int)offsetof(sample_part, Filter[0].mix),
    2,
    (int)sizeof(filterstruct),
    "part filter mix",
    ipvt_float,
    (int)offsetof(sample_part, Filter[0].p[0]),
    n_filter_parameters,
    (int)sizeof(float),
    "part filter1 fp",
    ipvt_float,
    (int)offsetof(sample_part, Filter[1].p[0]),
    n_filter_parameters,
    (int)sizeof(float),
    "part filter2 fp",
    ipvt_int,
    (int)offsetof(sample_part, Filter[0].ip[0]),
    n_filter_iparameters,
    (int)sizeof(int),
    "part filter1 ip",
    ipvt_int,
    (int)offsetof(sample_part, Filter[1].ip[0]),
    n_filter_iparameters,
    (int)sizeof(int),
    "part filter2 ip",
    ipvt_float,
    (int)offsetof(sample_part, aux[0].level),
    3,
    (int)sizeof(aux_buss),
    "part level",
    ipvt_float,
    (int)offsetof(sample_part, aux[0].balance),
    3,
    (int)sizeof(aux_buss),
    "part balance",
    ipvt_int,
    (int)offsetof(sample_part, aux[0].output),
    3,
    (int)sizeof(aux_buss),
    "part output",
    ipvt_int,
    (int)offsetof(sample_part, aux[0].outmode),
    3,
    (int)sizeof(aux_buss),
    "part off/pre/post",

    ipvt_int,
    (int)offsetof(sample_part, vs_layercount),
    1,
    0,
    "velsplit layers",
    ipvt_float,
    (int)offsetof(sample_part, vs_distribution),
    1,
    0,
    "split distribution",
    ipvt_int,
    (int)offsetof(sample_part, vs_xf_equality),
    1,
    0,
    "xfade equality",
    ipvt_float,
    (int)offsetof(sample_part, vs_xfade),
    1,
    0,
    "xfade amount",

    ipvt_int,
    (int)offsetof(sample_part, mm[0].source),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part source",
    ipvt_int,
    (int)offsetof(sample_part, mm[0].source2),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part source2",
    ipvt_int,
    (int)offsetof(sample_part, mm[0].destination),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part destination",
    ipvt_float,
    (int)offsetof(sample_part, mm[0].strength),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part amount",
    ipvt_int,
    (int)offsetof(sample_part, mm[0].curve),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part curve",
    ipvt_int,
    (int)offsetof(sample_part, mm[0].active),
    mm_part_entries,
    (int)sizeof(mm_entry),
    "MM part active",

    ipvt_int,
    (int)offsetof(sample_part, nc[0].source),
    num_part_ncs,
    (int)sizeof(nc_entry),
    "part nc src",
    ipvt_int,
    (int)offsetof(sample_part, nc[0].low),
    num_part_ncs,
    (int)sizeof(nc_entry),
    "part nc low",
    ipvt_int,
    (int)offsetof(sample_part, nc[0].high),
    num_part_ncs,
    (int)sizeof(nc_entry),
    "part nc high",

    ipvt_bdata,
    (int)offsetof(sample_multi, Filter),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter object",
    ipvt_int,
    (int)offsetof(sample_multi, Filter[0].type),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter type",
    ipvt_int,
    (int)offsetof(sample_multi, Filter[0].bypass),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter bypass",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[0]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp1",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[1]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp2",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[2]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp3",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[3]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp4",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[4]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp5",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[5]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp6",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[6]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp7",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[7]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp8",
    ipvt_float,
    (int)offsetof(sample_multi, Filter[0].p[8]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter fp9",
    ipvt_int,
    (int)offsetof(sample_multi, Filter[0].ip[0]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter ip1",
    ipvt_int,
    (int)offsetof(sample_multi, Filter[0].ip[1]),
    num_fxunits,
    (int)sizeof(filterstruct),
    "multi filter ip2",
    ipvt_int,
    (int)offsetof(sample_multi, filter_output[0]),
    num_fxunits,
    (int)sizeof(int),
    "multi filter output",
    ipvt_float,
    (int)offsetof(sample_multi, filter_pregain[0]),
    num_fxunits,
    (int)sizeof(float),
    "multi filter pregain",
    ipvt_float,
    (int)offsetof(sample_multi, filter_postgain[0]),
    num_fxunits,
    (int)sizeof(float),
    "multi filter postgain",
};

std::string datamode_from_cmode(int cmode);
